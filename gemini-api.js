/**
 * Gemini API Service
 * Manages API calls to Google's Gemini API for the Skill Gap Analyzer
 */
class GeminiApiService {
    constructor() {
        this.apiUrl = 'https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent';
        this.apiKey = null;
    }

    /**
     * Initialize the service with an API key
     * @param {string} apiKey - The Gemini API key
     */
    initialize(apiKey) {
        if (!apiKey || apiKey.trim().length < 10) {
            throw new Error('Invalid API key. Please provide a valid Gemini API key.');
        }
        this.apiKey = apiKey.trim();
    }

    /**
     * Make an API call to Gemini
     * @param {string} promptText - The prompt to send to Gemini
     * @returns {Promise<Object>} - The parsed response from Gemini
     */
    async callGeminiApi(promptText) {
        if (!this.apiKey) {
            throw new Error('API key not set. Call initialize() first.');
        }

        try {
            const url = `${this.apiUrl}?key=${this.apiKey}`;
            
            const requestBody = {
                contents: [{
                    parts: [{ text: promptText }]
                }]
            };

            const response = await fetch(url, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(requestBody)
            });

            if (!response.ok) {
                const errorData = await response.json().catch(() => null);
                throw new Error(`API error: ${response.status} - ${errorData?.error?.message || 'Unknown error'}`);
            }

            const data = await response.json();
            
            // Check if the response contains valid content
            if (!data.candidates || data.candidates.length === 0) {
                throw new Error('No content generated by the API');
            }

            const generatedText = data.candidates[0].content.parts[0].text;
            return this.parseResponse(generatedText, promptText);
        } catch (error) {
            console.error('Gemini API Error:', error);
            throw new Error(`Gemini API error: ${error.message}`);
        }
    }

    /**
     * Get required skills for a job role
     * @param {string} jobRole - The job role to analyze
     * @returns {Promise<string[]>} - Array of required skills
     */
    async getRequiredSkills(jobRole) {
        const prompt = `List exactly 10 essential skills required for the job role of ${jobRole}. 
                       Format the response as a JSON array of strings.
                       Example format: ["Skill 1", "Skill 2", "Skill 3"]
                       Only return the JSON array, with no additional text.`;
        
        return this.callGeminiApi(prompt);
    }

    /**
     * Extract skills from a resume
     * @param {string} resumeText - The resume text
     * @returns {Promise<string[]>} - Array of extracted skills
     */
    async extractSkillsFromResume(resumeText) {
        const prompt = `Extract the professional skills mentioned in the following resume text.
                       Format the response as a JSON array of strings.
                       Example format: ["Skill 1", "Skill 2", "Skill 3"]
                       Only return the JSON array, with no additional text.
                       
                       Resume text:
                       ${resumeText.slice(0, 3000)}`;  // Limit text length to avoid large prompts
        
        return this.callGeminiApi(prompt);
    }

    /**
     * Get learning recommendations for a skill
     * @param {string} skill - The skill to get recommendations for
     * @returns {Promise<Object>} - Object with recommendations
     */
    async getLearningRecommendations(skill) {
        const prompt = `Recommend learning resources for the skill "${skill}".
                       Format the response as a JSON object with these keys:
                       "courses" (array of 3 specific course names with providers),
                       "tutorials" (array of 3 specific tutorial sources),
                       "projects" (array of 3 practical projects to build this skill).
                       Example format: 
                       {
                         "courses": ["Course 1 on Platform A", "Course 2 on Platform B", "Course 3 on Platform C"],
                         "tutorials": ["Tutorial 1 on Site X", "Tutorial 2 on Site Y", "Tutorial 3 on Site Z"],
                         "projects": ["Project description 1", "Project description 2", "Project description 3"]
                       }
                       Only return the JSON object, with no additional text.`;
        
        return this.callGeminiApi(prompt);
    }

    /**
     * Parse the API response text to extract JSON data
     * @param {string} responseText - The raw text response from the API
     * @param {string} promptText - The original prompt (for error context)
     * @returns {Object|Array} - Parsed JSON from the response
     */
    parseResponse(responseText, promptText) {
        try {
            // Try to find JSON in the response
            const jsonMatch = responseText.match(/(\[.*\]|\{.*\})/s);
            
            if (jsonMatch) {
                return JSON.parse(jsonMatch[0]);
            }
            
            // If no JSON found, try to parse the whole response as JSON
            try {
                return JSON.parse(responseText);
            } catch (e) {
                // If that fails, check if we were expecting an array and create a fallback
                if (promptText.includes('JSON array')) {
                    // Extract potential items by looking for quoted strings
                    const items = [...responseText.matchAll(/"([^"]*)"/g)].map(m => m[1]);
                    if (items.length > 0) {
                        return items;
                    }
                    
                    // Last resort: split by newlines or commas
                    return responseText
                        .split(/[\n,]/)
                        .map(item => item.trim())
                        .filter(item => item.length > 0);
                }
                
                throw new Error('Failed to parse API response as JSON');
            }
        } catch (error) {
            console.error('Response parsing error:', error);
            console.log('Raw response:', responseText);
            throw new Error(`Failed to parse API response: ${error.message}`);
        }
    }
}

// Create a singleton instance
const geminiApi = new GeminiApiService();

// Export the instance
window.geminiApi = geminiApi;