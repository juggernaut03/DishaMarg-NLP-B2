// Learning Path Generator API integration
class LearningPathGenerator {
    constructor() {
        this.apiKey = null;
        this.apiUrl = 'https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-pro:generateContent';
    }
    
    initialize(apiKey) {
        if (!apiKey || apiKey.trim().length < 10) {
            throw new Error('Invalid API key. Please provide a valid API key.');
        }
        this.apiKey = apiKey.trim();
    }
    
    isInitialized() {
        return !!this.apiKey;
    }
    
    async generateRoadmap(skill, level, duration, hoursPerWeek, experience) {
        if (!this.isInitialized()) {
            throw new Error('API key not set. Call initialize() first or set key in settings.');
        }
        
        try {
            const prompt = this.createRoadmapPrompt(skill, level, duration, hoursPerWeek, experience);
            const response = await this.callGeminiApi(prompt);
            return this.parseRoadmapResponse(response, skill, level, duration, hoursPerWeek);
        } catch (error) {
            console.error('Roadmap generation failed:', error);
            return this.generateFallbackRoadmap(skill, level, duration, hoursPerWeek, experience);
        }
    }
    
    createRoadmapPrompt(skill, level, duration, hoursPerWeek, experience) {
        const durationWeeks = duration === '1-month' ? 4 :
                             duration === '3-months' ? 12 :
                             duration === '6-months' ? 24 : 48;
        const totalHours = durationWeeks * hoursPerWeek;
        
        let milestoneCount;
        if (level === 'basic') milestoneCount = 3;
        else if (level === 'intermediate') milestoneCount = 5;
        else if (level === 'advanced') milestoneCount = 7;
        else milestoneCount = 9;
        
        const currentDate = "March 27, 2025";
        
        return `
Create a detailed learning roadmap for ${skill} at the ${level} level. The learner has ${experience} experience, will dedicate ${hoursPerWeek} hours per week for a total duration of ${durationWeeks} weeks (${totalHours} total hours).

Structure the roadmap with ${milestoneCount} milestones, each representing a learning phase.

For each milestone, provide:
1. A clear title reflecting the key topic or focus area
2. A detailed description explaining what will be learned
3. The timeframe for completing this milestone in days or weeks
4. Specific project(s) to build during this milestone, with brief descriptions
5. Three practical learning resources (online tutorials, documentation, videos) that are current as of ${currentDate}

Format your response as a JSON object with the following structure:
{
  "milestones": [
    {
      "title": "Topic Title",
      "description": "Detailed description of what this milestone covers",
      "timeframe": "X days/weeks",
      "period": "Week X-Y",
      "projects": [
        {
          "name": "Project Name",
          "description": "Brief description of the project and what it demonstrates",
          "codeStructure": "Brief explanation of how the code structure would work"
        }
      ],
      "resources": [
        {
          "type": "course|tutorial|documentation|video",
          "name": "Resource name",
          "url": "#"
        }
      ]
    }
  ]
}

Focus on practical implementation relevant to ${skill}. Each milestone should logically build on previous ones. Distribute the weeks evenly across milestones. Include specific code structure advice for each project tailored to ${skill}. Ensure all resource recommendations are current as of ${currentDate}.
`;
    }
    
    async callGeminiApi(promptText) {
        const url = `${this.apiUrl}?key=${this.apiKey}`;
        
        const requestBody = {
            contents: [{ parts: [{ text: promptText }] }],
            generationConfig: { temperature: 0.2, maxOutputTokens: 8192 }
        };

        const response = await fetch(url, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(requestBody)
        });

        if (!response.ok) {
            const errorData = await response.json().catch(() => null);
            throw new Error(`API error: ${response.status} - ${errorData?.error?.message || 'Unknown error'}`);
        }

        const data = await response.json();
        
        if (!data.candidates || data.candidates.length === 0) {
            throw new Error('No content generated by the API');
        }

        return data.candidates[0].content.parts[0].text;
    }
    
    parseRoadmapResponse(responseText, skill, level, duration, hoursPerWeek) {
        try {
            const jsonMatch = responseText.match(/(\{[\s\S]*\})/);
            if (jsonMatch) {
                const roadmapData = JSON.parse(jsonMatch[0]);
                return {
                    skill: skill,
                    level: level,
                    duration: duration,
                    hoursPerWeek: hoursPerWeek,
                    totalHours: this.calculateTotalHours(duration, hoursPerWeek),
                    milestones: roadmapData.milestones || []
                };
            }
            throw new Error('Failed to extract JSON from API response');
        } catch (error) {
            console.error('Failed to parse roadmap data:', error);
            console.error('Raw response:', responseText);
            throw new Error('Failed to parse roadmap data');
        }
    }
    
    calculateTotalHours(duration, hoursPerWeek) {
        const weeks = duration === '1-month' ? 4 :
                     duration === '3-months' ? 12 :
                     duration === '6-months' ? 24 : 48;
        return weeks * hoursPerWeek;
    }
    
    generateFallbackRoadmap(skill, level, duration, hoursPerWeek, experience) {
        const totalHours = this.calculateTotalHours(duration, hoursPerWeek);
        const durationWeeks = this.calculateTotalHours(duration, 1);
        
        const milestoneCount = level === 'basic' ? 3 :
                             level === 'intermediate' ? 5 :
                             level === 'advanced' ? 7 : 9;
        
        const milestones = [];
        const skillContent = this.getFallbackContentForSkill(skill, level);
        
        for (let i = 0; i < milestoneCount; i++) {
            const weekStart = Math.floor((i / milestoneCount) * durationWeeks) + 1;
            const weekEnd = Math.floor(((i + 1) / milestoneCount) * durationWeeks);
            
            let milestone = {
                title: skillContent[i]?.title || `${skill} - Phase ${i + 1}`,
                description: skillContent[i]?.description || `Learn essential ${skill} concepts and skills in phase ${i + 1}.`,
                timeframe: skillContent[i]?.timeframe || `${Math.ceil((weekEnd - weekStart) * 7)} days`,
                period: `Week ${weekStart}${weekEnd > weekStart ? ` - Week ${weekEnd}` : ''}`,
                projects: skillContent[i]?.projects || [
                    {
                        name: `${skill} Project ${i + 1}`,
                        description: `Build a simple application to demonstrate ${skill} concepts learned in this phase.`,
                        codeStructure: "Create modular functions tailored to the skill's requirements."
                    }
                ],
                resources: skillContent[i]?.resources || [
                    { type: "course", name: `${skill} Fundamentals Course`, url: "#" },
                    { type: "tutorial", name: `${skill} Basics Tutorial`, url: "#" },
                    { type: "documentation", name: `Official ${skill} Documentation`, url: "#" }
                ]
            };
            milestones.push(milestone);
        }
        
        return {
            skill: skill,
            level: level,
            duration: duration,
            hoursPerWeek: hoursPerWeek,
            totalHours: totalHours,
            milestones: milestones
        };
    }
    
    getFallbackContentForSkill(skill, level) {
        const content = [];
        
        if (skill.toLowerCase().includes('web') || skill.toLowerCase().includes('javascript') || skill.toLowerCase().includes('html')) {
            content.push(
                {
                    title: "HTML & CSS Fundamentals",
                    description: "Learn the basic building blocks of web pages: HTML for structure and CSS for styling. Understand how to create responsive layouts.",
                    timeframe: "2 weeks",
                    projects: [
                        {
                            name: "Personal Portfolio Page",
                            description: "Create a simple personal portfolio with responsive design principles.",
                            codeStructure: "Use semantic HTML and modular CSS with a focus on responsive design."
                        }
                    ],
                    resources: [
                        { type: "course", name: "HTML & CSS Crash Course (2025)", url: "#" },
                        { type: "tutorial", name: "Responsive Web Design Fundamentals", url: "#" },
                        { type: "documentation", name: "MDN Web Docs - HTML & CSS", url: "https://developer.mozilla.org" }
                    ]
                },
                {
                    title: "JavaScript Core Concepts",
                    description: "Master JavaScript fundamentals including variables, functions, objects, arrays, and control flow.",
                    timeframe: "3 weeks",
                    projects: [
                        {
                            name: "Interactive Quiz App",
                            description: "Build a quiz application with dynamic content loading and score tracking.",
                            codeStructure: "Use modular JS functions with event listeners and DOM manipulation."
                        }
                    ],
                    resources: [
                        { type: "course", name: "Modern JavaScript from the Beginning", url: "#" },
                        { type: "documentation", name: "JavaScript Info - The Modern JavaScript Tutorial", url: "https://javascript.info" },
                        { type: "video", name: "JavaScript Crash Course for Beginners (2025)", url: "#" }
                    ]
                },
                {
                    title: "Working with APIs",
                    description: "Learn how to fetch data from REST APIs using JavaScript and handle responses.",
                    timeframe: "2 weeks",
                    projects: [
                        {
                            name: "API-Powered Dashboard",
                            description: "Create a dashboard that displays data fetched from a public API.",
                            codeStructure: "Implement async/await pattern for API calls and modular functions to process responses."
                        }
                    ],
                    resources: [
                        { type: "tutorial", name: "Working with Fetch API and Promises", url: "#" },
                        { type: "documentation", name: "MDN Fetch API Documentation", url: "https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API" },
                        { type: "course", name: "API Integration with JavaScript (2025)", url: "#" }
                    ]
                }
            );
        } else if (skill.toLowerCase().includes('machine') || skill.toLowerCase().includes('ai') || skill.toLowerCase().includes('data')) {
            content.push(
                {
                    title: "Python Fundamentals for Data Science",
                    description: "Learn essential Python concepts for data manipulation and analysis.",
                    timeframe: "2 weeks",
                    projects: [
                        {
                            name: "Data Visualization Dashboard",
                            description: "Create a simple dashboard that visualizes data using Python libraries.",
                            codeStructure: "Use functions to process data and integrate with visualization libraries like Matplotlib."
                        }
                    ],
                    resources: [
                        { type: "course", name: "Python for Data Science (2025)", url: "#" },
                        { type: "tutorial", name: "Data Visualization with Python", url: "#" },
                        { type: "documentation", name: "Python Official Documentation", url: "https://docs.python.org" }
                    ]
                },
                {
                    title: "Introduction to Machine Learning",
                    description: "Understand core machine learning concepts and basic algorithms.",
                    timeframe: "3 weeks",
                    projects: [
                        {
                            name: "Simple Prediction Model",
                            description: "Build a basic model to predict outcomes using a dataset.",
                            codeStructure: "Organize code into data preprocessing, model training, and evaluation modules."
                        }
                    ],
                    resources: [
                        { type: "course", name: "Machine Learning with Python (2025)", url: "#" },
                        { type: "tutorial", name: "Intro to ML with Scikit-Learn", url: "#" },
                        { type: "documentation", name: "Scikit-Learn Documentation", url: "https://scikit-learn.org" }
                    ]
                }
            );
        } else if (skill.toLowerCase().includes('flutter') || skill.toLowerCase().includes('mobile')) {
            content.push(
                {
                    title: "Flutter Basics",
                    description: "Learn the fundamentals of Flutter for building cross-platform mobile apps.",
                    timeframe: "2 weeks",
                    projects: [
                        {
                            name: "Simple To-Do App",
                            description: "Create a basic to-do list app with Flutter.",
                            codeStructure: "Use Dart classes and widgets to manage state and UI."
                        }
                    ],
                    resources: [
                        { type: "course", name: "Flutter Crash Course (2025)", url: "#" },
                        { type: "tutorial", name: "Getting Started with Flutter", url: "#" },
                        { type: "documentation", name: "Flutter Official Documentation", url: "https://flutter.dev/docs" }
                    ]
                },
                {
                    title: "State Management in Flutter",
                    description: "Master state management techniques in Flutter for dynamic apps.",
                    timeframe: "3 weeks",
                    projects: [
                        {
                            name: "Shopping List App",
                            description: "Build an app with persistent state and user interactions.",
                            codeStructure: "Implement Provider or Riverpod for state management with modular widgets."
                        }
                    ],
                    resources: [
                        { type: "tutorial", name: "Flutter State Management Guide", url: "#" },
                        { type: "documentation", name: "Flutter State Management Docs", url: "https://flutter.dev/docs/development/data-and-backend/state-mgmt" },
                        { type: "video", name: "Flutter State Management Explained (2025)", url: "#" }
                    ]
                }
            );
        } else {
            content.push(
                {
                    title: `${skill} Fundamentals`,
                    description: `Learn the core concepts and foundational skills for ${skill}.`,
                    timeframe: "2 weeks",
                    projects: [
                        {
                            name: `${skill} Starter Project`,
                            description: `Create a basic project to apply ${skill} fundamentals.`,
                            codeStructure: "Structure code logically based on the skill's typical practices."
                        }
                    ],
                    resources: [
                        { type: "course", name: `${skill} Basics Course (2025)`, url: "#" },
                        { type: "tutorial", name: `${skill} Getting Started`, url: "#" },
                        { type: "documentation", name: `${skill} Official Docs`, url: "#" }
                    ]
                },
                {
                    title: `${skill} Intermediate Skills`,
                    description: `Build on foundational knowledge with intermediate ${skill} techniques.`,
                    timeframe: "3 weeks",
                    projects: [
                        {
                            name: `${skill} Intermediate Project`,
                            description: `Develop a project that demonstrates intermediate ${skill} concepts.`,
                            codeStructure: "Use modular design patterns relevant to ${skill}."
                        }
                    ],
                    resources: [
                        { type: "course", name: `${skill} Intermediate Course`, url: "#" },
                        { type: "tutorial", name: `${skill} Intermediate Techniques`, url: "#" },
                        { type: "video", name: `${skill} Intermediate Tutorial (2025)`, url: "#" }
                    ]
                }
            );
        }
        return content;
    }
}

const learningPathGenerator = new LearningPathGenerator();
window.learningPathGenerator = learningPathGenerator;

function populateRoadmap(data) {
    document.getElementById('roadmap-skill').textContent = data.skill;
    document.getElementById('roadmap-level').textContent = data.level.charAt(0).toUpperCase() + data.level.slice(1);
    
    const durationDisplay = data.duration === '1-month' ? '1 Month' : 
                          data.duration === '3-months' ? '3 Months' : 
                          data.duration === '6-months' ? '6 Months' : '1 Year';
    document.getElementById('summary-duration').textContent = durationDisplay;
    document.getElementById('summary-hours').textContent = `${data.hoursPerWeek} Hours/Week`;
    document.getElementById('summary-total').textContent = `${data.totalHours} Hours`;
    
    const timelineContainer = document.getElementById('roadmap-timeline');
    timelineContainer.innerHTML = '';
    
    data.milestones.forEach((milestone, index) => {
        const accordionId = `milestone-${index}`;
        const timelineItem = document.createElement('div');
        timelineItem.className = 'timeline-item';
        
        timelineItem.innerHTML = `
            <div class="timeline-marker"></div>
            <div class="timeline-content w-full">
                <div class="flex">
                    <span class="timeline-period">${milestone.period}</span>
                    <span class="timeline-timeframe">${milestone.timeframe || 'N/A'}</span>
                </div>
                <button class="accordion-btn" onclick="toggleAccordion('${accordionId}')">
                    <h3 class="text-xl font-medium">${milestone.title}</h3>
                    <i class="fas fa-chevron-down"></i>
                </button>
                <div id="${accordionId}" class="accordion-content">
                    <p class="text-gray-400 mb-4">${milestone.description}</p>
                    <h4 class="font-medium mt-4 mb-2 text-blue-400">
                        <i class="fas fa-laptop-code mr-2"></i> Projects
                    </h4>
                    ${milestone.projects ? milestone.projects.map(project => `
                        <div class="project-card">
                            <h5 class="font-medium text-green-400">${project.name}</h5>
                            <p class="text-gray-400 text-sm mt-1">${project.description}</p>
                            ${project.codeStructure ? `
                                <div class="mt-3">
                                    <h6 class="text-sm font-medium text-orange-400 mb-1">Code Structure</h6>
                                    <div class="code-structure">
                                        ${project.codeStructure}
                                    </div>
                                </div>
                            ` : ''}
                        </div>
                    `).join('') : '<p class="text-gray-500">No projects specified</p>'}
                    <h4 class="font-medium mt-6 mb-2 text-blue-400">
                        <i class="fas fa-book mr-2"></i> Learning Resources
                    </h4>
                    ${milestone.resources ? milestone.resources.map(resource => `
                        <a href="${resource.url}" class="resource-link" target="_blank">
                            <i class="fas fa-${resource.type === 'course' ? 'graduation-cap' : 
                                              resource.type === 'tutorial' ? 'laptop-code' : 
                                              resource.type === 'video' ? 'video' : 
                                              'book'} resource-icon"></i>
                            <span>${resource.name}</span>
                        </a>
                    `).join('') : '<p class="text-gray-500">No resources specified</p>'}
                </div>
            </div>
        `;
        timelineContainer.appendChild(timelineItem);
    });
    
    setTimeout(() => {
        const firstAccordionId = 'milestone-0';
        toggleAccordion(firstAccordionId);
    }, 100);
}

function toggleAccordion(id) {
    const accordionContent = document.getElementById(id);
    if (!accordionContent) return;
    
    accordionContent.classList.toggle('active');
    const accordionButton = accordionContent.previousElementSibling;
    const icon = accordionButton.querySelector('i');
    if (accordionContent.classList.contains('active')) {
        icon.classList.remove('fa-chevron-down');
        icon.classList.add('fa-chevron-up');
    } else {
        icon.classList.remove('fa-chevron-up');
        icon.classList.add('fa-chevron-down');
    }
}

window.populateRoadmap = populateRoadmap;
window.toggleAccordion = toggleAccordion;